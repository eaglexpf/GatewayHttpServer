<?php
/**
 * User: Roc.xu
 * Date: 2018/3/6
 * Time: 13:29
 */

namespace GatewayHttpServer;

use Workerman\Connection\TcpConnection;
use Workerman\Lib\Timer;
use Workerman\MySQL\Connection;
use Workerman\Worker;

class LogServer extends Worker{
    //日志buffer
    protected $log_buffer = [];
    //定时清理
    public $udp_log_time = 300;
    //大于数据长度清理
    public $udp_log_size = 102400;
    //链接缓存最大值
    public $maxBufferSize = 50*1024*1024;
    //http端口
    public $http_port;
    //数据库配置
    public $db;

//    protected $num = 0;
    public function __construct($socket_name, $context_option = [])
    {
        $arr = explode(':',$socket_name);
        $protocol = array_shift($arr);
        //为通讯协议类设置别名；可以让workerman使用
        if (!class_exists('\Protocols\LogProtocol')){
            class_alias('GatewayHttpServer\Protocols\LogProtocol','Protocols\LogProtocol');
        }
        $socket_name = str_replace($protocol,'LogProtocol',$socket_name);
        parent::__construct($socket_name, $context_option);
    }

    public function run()
    {
        $this->onWorkerStart = [$this,'onWorkerStart'];
        $this->onMessage = [$this,'onUdpMessage'];
        $this->onWorkerStop = function ($worker){
            $this->insertLogBuffer();
        };
        parent::run(); // TODO: Change the autogenerated stub
    }
    public function onWorkerStart($worker){
        //默认设置
        TcpConnection::$defaultMaxSendBufferSize = $this->maxBufferSize;
        TcpConnection::$maxPackageSize = $this->maxBufferSize;
        Timer::add($this->udp_log_time,function (){
            $this->insertLogBuffer();
        });
        $time = strtotime(date('Y-m-d',time()))+24*3600-time()-1;
        Timer::add($time,function (){
            $this->day_time();
        },null,false);
        if ($worker->id==0){
            $this->initHttp();
        }
//        Timer::add(20,function (){
//            var_dump("this is worker:".$this->id." this is num:".$this->num);
//        });

    }
    public function day_time(){
        Timer::add(24*3600,function (){
            $this->insertLogBuffer();
        });
        $this->insertLogBuffer();
    }
    public function onUdpMessage($connection,$data){
//        $this->num++;
        $this->log_buffer[] = $data;
//        $this->insertLogBuffer();
        if (strlen(json_encode($this->log_buffer))>$this->udp_log_size){
            $this->insertLogBuffer();
        }
    }
    public function insertLogBuffer(){
        if (empty($this->log_buffer)){
            return false;
        }
        $db = Db::instance($this->db);
        $sheet = 'log_'.date('Ymd',time());
        $table = $db->query("show tables like '$sheet'");
        if (empty($table)){
            $db->query("CREATE TABLE `$sheet` (
            `id`  int(11) NOT NULL AUTO_INCREMENT ,
            `ip`  varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `method`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `status`  varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `request_time`  datetime NOT NULL ,
            `run_time`  float(10,6) NOT NULL ,
            `request`  longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `response`  longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            PRIMARY KEY (`id`),
            INDEX `status` (`status`) USING BTREE ,
            INDEX `run_time` (`run_time`) USING BTREE ,
            INDEX `request_time` (`request_time`) USING BTREE ,
            INDEX `status,run_time` (`status`, `run_time`) USING BTREE ,
            INDEX `status,run_time,request_time` (`status`, `run_time`, `request_time`) USING BTREE 
            );");
        }
        $sql = '';
        foreach ($this->log_buffer as $value){
            $sql .= "('{$value['ip']}','{$value['method']}','{$value['status']}','".date('Y-m-d H:i:s',$value['request_time'])."',{$value['run_time']},'{$value['request']}','{$value['response']}'),";
        }
        $sql = rtrim($sql,',');
        if (empty($sql)){
            return false;
        }
        $sql = "INSERT INTO $sheet (ip,method,status,request_time,run_time,request,response)VALUES $sql";
        $db->query($sql);
        $this->log_buffer = [];
    }
    public function initHttp(){
        if (empty($this->http_port)){
            return false;
        }
        $http = new Worker('http://0.0.0.0:'.$this->http_port);
        $http->onMessage = [$this,'onHttpMessage'];
        $http->listen();
    }
    public function onHttpMessage($connection,$data){
        $time = microtime(true);
        $parse_url = parse_url($data['server']['REQUEST_URI']);
        $path = pathinfo($parse_url['path']);
        if (isset($path['extension'])) {
                return $connection->send('404 Not Found!');
        }
        if (!isset($data['get']['day'])||empty($data['get']['day'])){
            $timestamp = time();
        }else{
            $timestamp = strtotime($data['get']['day']);
        }

        $db = Db::instance($this->db);
        $sheet = 'log_'.date('Ymd',$timestamp);
        //查询表是否存在，不存在则新建
        $table = $db->query("show tables like '$sheet'");
        if (empty($table)){
            $db->query("CREATE TABLE `$sheet` (
            `id`  int(11) NOT NULL AUTO_INCREMENT ,
            `ip`  varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `method`  varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `status`  varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `request_time`  datetime NOT NULL ,
            `run_time`  float(10,6) NOT NULL ,
            `request`  longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            `response`  longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL ,
            PRIMARY KEY (`id`),
            INDEX `status` (`status`) USING BTREE ,
            INDEX `run_time` (`run_time`) USING BTREE ,
            INDEX `request_time` (`request_time`) USING BTREE ,
            INDEX `status,run_time` (`status`, `run_time`) USING BTREE ,
            INDEX `status,run_time,request_time` (`status`, `run_time`, `request_time`) USING BTREE 
            );");
        }
        //整体
        $all = $db->row("select count(*) as count,SUM(run_time) as all_run_time from $sheet");
        $all['longest'] = $db->row("select request_time,method,status,run_time,request,response from $sheet order by run_time desc limit 0,1");

        //状态分组
        $ret = $db->query("select status,count(status) as count,sum(run_time) as all_run_time from $sheet group by status");
        $all_status = [];
        foreach ($ret as $value){
            $value['longest'] = $db->row("select request_time,method,status,run_time,request,response from $sheet where status='".$value['status']."' order by run_time desc limit 0,1");
            $all_status[] = $value;
        }

        //时间节点分组
        $day = date('Y-m-d',$timestamp);
        $timestamp = strtotime($day);
        $all_time = [];
        $space = 1800;
        while ($timestamp<strtotime($day)+24*3600){
            $time_data = $db->row("select count(status) as count,SUM(run_time) as all_run_time from $sheet WHERE request_time>'".date('Y-m-d H:i:s',$timestamp)."' AND request_time<='".date('Y-m-d H:i:s',$timestamp+$space)."'");
            $time_data['longest'] = $db->row("select request_time,method,status,run_time,request,response from $sheet where request_time>'".date('Y-m-d H:i:s',$timestamp)."' AND request_time<='".date('Y-m-d H:i:s',$timestamp+$space)."' order by run_time desc limit 0,1");
            $all_time[date('Y-m-d H:i:s',$timestamp+$space)] = $time_data;

            $timestamp += $space;
        }

        $year = date('Y',time());
        $month = date('m',time());
        $today = date('d',time());
        //$month=1;$today=30;
        //获取本月最后一天
        $month_last_day = date('d',strtotime($year.'-'.($month<12?($month+1):1))-1);

        //本月1号周几
        $month_first_day = date('w',strtotime($year.'-'.$month.'-1'));


        ini_set('display_errors', 'off');
        ob_start();
        try {
            include __DIR__.'/config/log_web.php';
        } catch (\Exception $e) {
            // Jump_exit?
            if ($e->getMessage() != 'jump_exit') {
                echo $e;
            }
        }
        $content = ob_get_clean();
        ini_set('display_errors', 'on');
        if (strtolower($data['server']['HTTP_CONNECTION']) === "keep-alive") {
            return $connection->send($content);
        } else {
            return $connection->send($content,false);
        }
    }
}
class Db{
    protected static $instance;
    public static function instance($db){
        if (empty($db)||!is_array($db)){
            echo "mysql not set\n";
            throw new \Exception("mysql not set\n");
        }
        if (empty(self::$instance)){
            self::$instance = new Connection($db['host'], $db['port'],
                $db['user'], $db['password'], $db['dbname']);
        }
        return self::$instance;

    }
}